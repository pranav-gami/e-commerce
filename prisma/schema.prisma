// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model Products {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  price       Float
  description String        @db.VarChar(255)
  categoryID  Int
  category    Category      @relation(fields: [categoryID], references: [id])
  image       String        @db.VarChar(255)
  CartProduct CartProduct[]
  rating      Int           @default(2) @db.SmallInt

  @@map("product")
}

model Category {
  id           Int        @id @default(autoincrement())
  categoryName String     @unique @db.VarChar(255)
  image        String     @db.VarChar(255)
  products     Products[]

  @@map("category")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @db.VarChar(50)
  email    String  @unique @db.VarChar(50)
  password String  @db.VarChar(100)
  isActive Boolean @default(false)
  role     Role    @default(USER)
  cart     Cart?

  @@map("user")
}

model Cart {
  id          Int           @id @default(autoincrement())
  userId      Int           @unique
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  CartProduct CartProduct[]
  order       order[]

  @@map("Cart")
}

model CartProduct {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int @default(1)

  cart    Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("Cartproduct")
}

model order {
  id          Int      @id @default(autoincrement())
  userId      Int
  cart        Cart     @relation(fields: [userId], references: [id])
  totalamount Int
  orderDate   DateTime @default(now())
  status      String   @default("Pending")
  Payment     Payment?

  @@map("Order")
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int      @unique
  order         order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount        Int
  paymentMethod String   @default("COD") //CASH ON DELIVERY
  paidAt        DateTime @default(now())

  @@map("Payment")
}
