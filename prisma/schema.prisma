// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model Products {
  id            Int           @id @default(autoincrement())
  title         String        @db.VarChar(255)
  price         Float
  description   String        @db.VarChar(255)
  categoryID    Int
  category      Category      @relation(fields: [categoryID], references: [id], onDelete: Cascade)
  image         String        @db.VarChar(255)
  CartProduct   CartProduct[]
  rating        Float         @default(2.0)
  subcategoryId Int?
  Subcategory   Subcategory?  @relation(fields: [subcategoryId], references: [id])
  OrderItem     OrderItem[]

  @@map("product")
}

model Category {
  id           Int           @id @default(autoincrement())
  categoryName String        @unique @db.VarChar(255)
  image        String        @db.VarChar(255)
  products     Products[]
  Subcategory  Subcategory[]

  @@map("category")
}

model Subcategory {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  categoryId Int
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products   Products[]

  @@unique([name, categoryId]) // Prevent duplicate subcategories under same category
  @@map("subcategory")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @db.VarChar(50)
  email    String  @unique @db.VarChar(50)
  password String  @db.VarChar(100)
  isActive Boolean @default(false)
  role     Role    @default(USER)
  cart     Cart?
  city     String  @db.VarChar(50)
  phone    String  @db.VarChar(10)
  address  String? @db.VarChar(100)
  Otp      Otp[]

  @@map("user")
}

model Otp {
  id        Int      @id @default(autoincrement())
  userId    Int
  otp       String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Cart {
  id          Int           @id @default(autoincrement())
  userId      Int           @unique
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  CartProduct CartProduct[]
  order       order[]

  @@map("Cart")
}

model CartProduct {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int @default(1)

  cart    Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("Cartproduct")
}

model order {
  id          Int         @id @default(autoincrement())
  userId      Int
  cart        Cart        @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalamount Int
  orderDate   DateTime    @default(now())
  Payment     Payment?
  items       OrderItem[]

  @@map("Order")
}

enum OrderStatus {
  PENDING
  CANCELLED
  DELIVERED
  SHIPPED
}

model OrderItem {
  id        Int         @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int         @default(1)
  price     Float
  title     String
  image     String
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  order   order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Products @relation(fields: [productId], references: [id])

  @@map("OrderItem")
}

enum paymentStatus {
  PENDING
  PAID
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  order         order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount        Int
  paymentMethod String        @default("COD")
  status        paymentStatus @default(PENDING)
  paidAt        DateTime      @default(now())

  @@map("Payment")
}
